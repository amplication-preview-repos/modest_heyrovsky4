/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Process as PrismaProcess } from "@prisma/client";

export class ProcessServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProcessCountArgs, "select">): Promise<number> {
    return this.prisma.process.count(args);
  }

  async processes<T extends Prisma.ProcessFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProcessFindManyArgs>
  ): Promise<PrismaProcess[]> {
    return this.prisma.process.findMany<Prisma.ProcessFindManyArgs>(args);
  }
  async process<T extends Prisma.ProcessFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProcessFindUniqueArgs>
  ): Promise<PrismaProcess | null> {
    return this.prisma.process.findUnique(args);
  }
  async createProcess<T extends Prisma.ProcessCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProcessCreateArgs>
  ): Promise<PrismaProcess> {
    return this.prisma.process.create<T>(args);
  }
  async updateProcess<T extends Prisma.ProcessUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProcessUpdateArgs>
  ): Promise<PrismaProcess> {
    return this.prisma.process.update<T>(args);
  }
  async deleteProcess<T extends Prisma.ProcessDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProcessDeleteArgs>
  ): Promise<PrismaProcess> {
    return this.prisma.process.delete(args);
  }
}
