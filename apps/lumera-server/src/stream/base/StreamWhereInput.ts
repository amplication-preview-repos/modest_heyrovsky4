/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { ConnectionListRelationFilter } from "../../connection/base/ConnectionListRelationFilter";
import { ValidateNested, IsOptional, IsEnum } from "class-validator";
import { Type } from "class-transformer";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { StringFilter } from "../../util/StringFilter";
import { ProtocolWhereUniqueInput } from "../../protocol/base/ProtocolWhereUniqueInput";
import { EnumStreamStatus } from "./EnumStreamStatus";

@InputType()
class StreamWhereInput {
  @ApiProperty({
    required: false,
    type: () => ConnectionListRelationFilter,
  })
  @ValidateNested()
  @Type(() => ConnectionListRelationFilter)
  @IsOptional()
  @Field(() => ConnectionListRelationFilter, {
    nullable: true,
  })
  connections?: ConnectionListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  createdBy?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: () => ProtocolWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => ProtocolWhereUniqueInput)
  @IsOptional()
  @Field(() => ProtocolWhereUniqueInput, {
    nullable: true,
  })
  protocol?: ProtocolWhereUniqueInput;

  @ApiProperty({
    required: false,
    enum: EnumStreamStatus,
  })
  @IsEnum(EnumStreamStatus)
  @IsOptional()
  @Field(() => EnumStreamStatus, {
    nullable: true,
  })
  status?: "Option1";

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  streamUrl?: StringNullableFilter;
}

export { StreamWhereInput as StreamWhereInput };
