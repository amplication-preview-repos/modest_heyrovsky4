/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Protocol } from "./Protocol";
import { ProtocolCountArgs } from "./ProtocolCountArgs";
import { ProtocolFindManyArgs } from "./ProtocolFindManyArgs";
import { ProtocolFindUniqueArgs } from "./ProtocolFindUniqueArgs";
import { CreateProtocolArgs } from "./CreateProtocolArgs";
import { UpdateProtocolArgs } from "./UpdateProtocolArgs";
import { DeleteProtocolArgs } from "./DeleteProtocolArgs";
import { StreamFindManyArgs } from "../../stream/base/StreamFindManyArgs";
import { Stream } from "../../stream/base/Stream";
import { ProtocolService } from "../protocol.service";
@graphql.Resolver(() => Protocol)
export class ProtocolResolverBase {
  constructor(protected readonly service: ProtocolService) {}

  async _protocolsMeta(
    @graphql.Args() args: ProtocolCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Protocol])
  async protocols(
    @graphql.Args() args: ProtocolFindManyArgs
  ): Promise<Protocol[]> {
    return this.service.protocols(args);
  }

  @graphql.Query(() => Protocol, { nullable: true })
  async protocol(
    @graphql.Args() args: ProtocolFindUniqueArgs
  ): Promise<Protocol | null> {
    const result = await this.service.protocol(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Protocol)
  async createProtocol(
    @graphql.Args() args: CreateProtocolArgs
  ): Promise<Protocol> {
    return await this.service.createProtocol({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Protocol)
  async updateProtocol(
    @graphql.Args() args: UpdateProtocolArgs
  ): Promise<Protocol | null> {
    try {
      return await this.service.updateProtocol({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Protocol)
  async deleteProtocol(
    @graphql.Args() args: DeleteProtocolArgs
  ): Promise<Protocol | null> {
    try {
      return await this.service.deleteProtocol(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Stream], { name: "streams" })
  async findStreams(
    @graphql.Parent() parent: Protocol,
    @graphql.Args() args: StreamFindManyArgs
  ): Promise<Stream[]> {
    const results = await this.service.findStreams(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
