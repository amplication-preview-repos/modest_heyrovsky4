/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProtocolService } from "../protocol.service";
import { ProtocolCreateInput } from "./ProtocolCreateInput";
import { Protocol } from "./Protocol";
import { ProtocolFindManyArgs } from "./ProtocolFindManyArgs";
import { ProtocolWhereUniqueInput } from "./ProtocolWhereUniqueInput";
import { ProtocolUpdateInput } from "./ProtocolUpdateInput";
import { StreamFindManyArgs } from "../../stream/base/StreamFindManyArgs";
import { Stream } from "../../stream/base/Stream";
import { StreamWhereUniqueInput } from "../../stream/base/StreamWhereUniqueInput";

export class ProtocolControllerBase {
  constructor(protected readonly service: ProtocolService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Protocol })
  async createProtocol(
    @common.Body() data: ProtocolCreateInput
  ): Promise<Protocol> {
    return await this.service.createProtocol({
      data: data,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
        version: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Protocol] })
  @ApiNestedQuery(ProtocolFindManyArgs)
  async protocols(@common.Req() request: Request): Promise<Protocol[]> {
    const args = plainToClass(ProtocolFindManyArgs, request.query);
    return this.service.protocols({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
        version: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Protocol })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async protocol(
    @common.Param() params: ProtocolWhereUniqueInput
  ): Promise<Protocol | null> {
    const result = await this.service.protocol({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
        version: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Protocol })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProtocol(
    @common.Param() params: ProtocolWhereUniqueInput,
    @common.Body() data: ProtocolUpdateInput
  ): Promise<Protocol | null> {
    try {
      return await this.service.updateProtocol({
        where: params,
        data: data,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Protocol })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProtocol(
    @common.Param() params: ProtocolWhereUniqueInput
  ): Promise<Protocol | null> {
    try {
      return await this.service.deleteProtocol({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/streams")
  @ApiNestedQuery(StreamFindManyArgs)
  async findStreams(
    @common.Req() request: Request,
    @common.Param() params: ProtocolWhereUniqueInput
  ): Promise<Stream[]> {
    const query = plainToClass(StreamFindManyArgs, request.query);
    const results = await this.service.findStreams(params.id, {
      ...query,
      select: {
        createdAt: true,
        createdBy: true,
        id: true,

        protocol: {
          select: {
            id: true,
          },
        },

        status: true,
        streamUrl: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/streams")
  async connectStreams(
    @common.Param() params: ProtocolWhereUniqueInput,
    @common.Body() body: StreamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      streams: {
        connect: body,
      },
    };
    await this.service.updateProtocol({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/streams")
  async updateStreams(
    @common.Param() params: ProtocolWhereUniqueInput,
    @common.Body() body: StreamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      streams: {
        set: body,
      },
    };
    await this.service.updateProtocol({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/streams")
  async disconnectStreams(
    @common.Param() params: ProtocolWhereUniqueInput,
    @common.Body() body: StreamWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      streams: {
        disconnect: body,
      },
    };
    await this.service.updateProtocol({
      where: params,
      data,
      select: { id: true },
    });
  }
}
