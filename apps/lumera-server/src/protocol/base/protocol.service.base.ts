/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Protocol as PrismaProtocol,
  Stream as PrismaStream,
} from "@prisma/client";

export class ProtocolServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ProtocolCountArgs, "select">): Promise<number> {
    return this.prisma.protocol.count(args);
  }

  async protocols<T extends Prisma.ProtocolFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProtocolFindManyArgs>
  ): Promise<PrismaProtocol[]> {
    return this.prisma.protocol.findMany<Prisma.ProtocolFindManyArgs>(args);
  }
  async protocol<T extends Prisma.ProtocolFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProtocolFindUniqueArgs>
  ): Promise<PrismaProtocol | null> {
    return this.prisma.protocol.findUnique(args);
  }
  async createProtocol<T extends Prisma.ProtocolCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProtocolCreateArgs>
  ): Promise<PrismaProtocol> {
    return this.prisma.protocol.create<T>(args);
  }
  async updateProtocol<T extends Prisma.ProtocolUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProtocolUpdateArgs>
  ): Promise<PrismaProtocol> {
    return this.prisma.protocol.update<T>(args);
  }
  async deleteProtocol<T extends Prisma.ProtocolDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ProtocolDeleteArgs>
  ): Promise<PrismaProtocol> {
    return this.prisma.protocol.delete(args);
  }

  async findStreams(
    parentId: string,
    args: Prisma.StreamFindManyArgs
  ): Promise<PrismaStream[]> {
    return this.prisma.protocol
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .streams(args);
  }
}
