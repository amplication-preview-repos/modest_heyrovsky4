/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GestureService } from "../gesture.service";
import { GestureCreateInput } from "./GestureCreateInput";
import { Gesture } from "./Gesture";
import { GestureFindManyArgs } from "./GestureFindManyArgs";
import { GestureWhereUniqueInput } from "./GestureWhereUniqueInput";
import { GestureUpdateInput } from "./GestureUpdateInput";

export class GestureControllerBase {
  constructor(protected readonly service: GestureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Gesture })
  async createGesture(
    @common.Body() data: GestureCreateInput
  ): Promise<Gesture> {
    return await this.service.createGesture({
      data: data,
      select: {
        command: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Gesture] })
  @ApiNestedQuery(GestureFindManyArgs)
  async gestures(@common.Req() request: Request): Promise<Gesture[]> {
    const args = plainToClass(GestureFindManyArgs, request.query);
    return this.service.gestures({
      ...args,
      select: {
        command: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Gesture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async gesture(
    @common.Param() params: GestureWhereUniqueInput
  ): Promise<Gesture | null> {
    const result = await this.service.gesture({
      where: params,
      select: {
        command: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Gesture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateGesture(
    @common.Param() params: GestureWhereUniqueInput,
    @common.Body() data: GestureUpdateInput
  ): Promise<Gesture | null> {
    try {
      return await this.service.updateGesture({
        where: params,
        data: data,
        select: {
          command: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Gesture })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteGesture(
    @common.Param() params: GestureWhereUniqueInput
  ): Promise<Gesture | null> {
    try {
      return await this.service.deleteGesture({
        where: params,
        select: {
          command: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
