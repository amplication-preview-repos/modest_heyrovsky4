/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Gesture } from "./Gesture";
import { GestureCountArgs } from "./GestureCountArgs";
import { GestureFindManyArgs } from "./GestureFindManyArgs";
import { GestureFindUniqueArgs } from "./GestureFindUniqueArgs";
import { CreateGestureArgs } from "./CreateGestureArgs";
import { UpdateGestureArgs } from "./UpdateGestureArgs";
import { DeleteGestureArgs } from "./DeleteGestureArgs";
import { GestureService } from "../gesture.service";
@graphql.Resolver(() => Gesture)
export class GestureResolverBase {
  constructor(protected readonly service: GestureService) {}

  async _gesturesMeta(
    @graphql.Args() args: GestureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Gesture])
  async gestures(
    @graphql.Args() args: GestureFindManyArgs
  ): Promise<Gesture[]> {
    return this.service.gestures(args);
  }

  @graphql.Query(() => Gesture, { nullable: true })
  async gesture(
    @graphql.Args() args: GestureFindUniqueArgs
  ): Promise<Gesture | null> {
    const result = await this.service.gesture(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Gesture)
  async createGesture(
    @graphql.Args() args: CreateGestureArgs
  ): Promise<Gesture> {
    return await this.service.createGesture({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Gesture)
  async updateGesture(
    @graphql.Args() args: UpdateGestureArgs
  ): Promise<Gesture | null> {
    try {
      return await this.service.updateGesture({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Gesture)
  async deleteGesture(
    @graphql.Args() args: DeleteGestureArgs
  ): Promise<Gesture | null> {
    try {
      return await this.service.deleteGesture(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
