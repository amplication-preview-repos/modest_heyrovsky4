/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BackgroundSettings } from "./BackgroundSettings";
import { BackgroundSettingsCountArgs } from "./BackgroundSettingsCountArgs";
import { BackgroundSettingsFindManyArgs } from "./BackgroundSettingsFindManyArgs";
import { BackgroundSettingsFindUniqueArgs } from "./BackgroundSettingsFindUniqueArgs";
import { CreateBackgroundSettingsArgs } from "./CreateBackgroundSettingsArgs";
import { UpdateBackgroundSettingsArgs } from "./UpdateBackgroundSettingsArgs";
import { DeleteBackgroundSettingsArgs } from "./DeleteBackgroundSettingsArgs";
import { BackgroundSettingsService } from "../backgroundSettings.service";
@graphql.Resolver(() => BackgroundSettings)
export class BackgroundSettingsResolverBase {
  constructor(protected readonly service: BackgroundSettingsService) {}

  async _backgroundSettingsItemsMeta(
    @graphql.Args() args: BackgroundSettingsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BackgroundSettings])
  async backgroundSettingsItems(
    @graphql.Args() args: BackgroundSettingsFindManyArgs
  ): Promise<BackgroundSettings[]> {
    return this.service.backgroundSettingsItems(args);
  }

  @graphql.Query(() => BackgroundSettings, { nullable: true })
  async backgroundSettings(
    @graphql.Args() args: BackgroundSettingsFindUniqueArgs
  ): Promise<BackgroundSettings | null> {
    const result = await this.service.backgroundSettings(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BackgroundSettings)
  async createBackgroundSettings(
    @graphql.Args() args: CreateBackgroundSettingsArgs
  ): Promise<BackgroundSettings> {
    return await this.service.createBackgroundSettings({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BackgroundSettings)
  async updateBackgroundSettings(
    @graphql.Args() args: UpdateBackgroundSettingsArgs
  ): Promise<BackgroundSettings | null> {
    try {
      return await this.service.updateBackgroundSettings({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BackgroundSettings)
  async deleteBackgroundSettings(
    @graphql.Args() args: DeleteBackgroundSettingsArgs
  ): Promise<BackgroundSettings | null> {
    try {
      return await this.service.deleteBackgroundSettings(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
