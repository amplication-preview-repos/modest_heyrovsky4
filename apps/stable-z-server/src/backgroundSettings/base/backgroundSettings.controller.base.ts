/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BackgroundSettingsService } from "../backgroundSettings.service";
import { BackgroundSettingsCreateInput } from "./BackgroundSettingsCreateInput";
import { BackgroundSettings } from "./BackgroundSettings";
import { BackgroundSettingsFindManyArgs } from "./BackgroundSettingsFindManyArgs";
import { BackgroundSettingsWhereUniqueInput } from "./BackgroundSettingsWhereUniqueInput";
import { BackgroundSettingsUpdateInput } from "./BackgroundSettingsUpdateInput";

export class BackgroundSettingsControllerBase {
  constructor(protected readonly service: BackgroundSettingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BackgroundSettings })
  async createBackgroundSettings(
    @common.Body() data: BackgroundSettingsCreateInput
  ): Promise<BackgroundSettings> {
    return await this.service.createBackgroundSettings({
      data: data,
      select: {
        brightness: true,
        contrast: true,
        createdAt: true,
        enableLiveFeed: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BackgroundSettings] })
  @ApiNestedQuery(BackgroundSettingsFindManyArgs)
  async backgroundSettingsItems(
    @common.Req() request: Request
  ): Promise<BackgroundSettings[]> {
    const args = plainToClass(BackgroundSettingsFindManyArgs, request.query);
    return this.service.backgroundSettingsItems({
      ...args,
      select: {
        brightness: true,
        contrast: true,
        createdAt: true,
        enableLiveFeed: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BackgroundSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async backgroundSettings(
    @common.Param() params: BackgroundSettingsWhereUniqueInput
  ): Promise<BackgroundSettings | null> {
    const result = await this.service.backgroundSettings({
      where: params,
      select: {
        brightness: true,
        contrast: true,
        createdAt: true,
        enableLiveFeed: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BackgroundSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBackgroundSettings(
    @common.Param() params: BackgroundSettingsWhereUniqueInput,
    @common.Body() data: BackgroundSettingsUpdateInput
  ): Promise<BackgroundSettings | null> {
    try {
      return await this.service.updateBackgroundSettings({
        where: params,
        data: data,
        select: {
          brightness: true,
          contrast: true,
          createdAt: true,
          enableLiveFeed: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BackgroundSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBackgroundSettings(
    @common.Param() params: BackgroundSettingsWhereUniqueInput
  ): Promise<BackgroundSettings | null> {
    try {
      return await this.service.deleteBackgroundSettings({
        where: params,
        select: {
          brightness: true,
          contrast: true,
          createdAt: true,
          enableLiveFeed: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
