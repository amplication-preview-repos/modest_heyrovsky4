/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CameraSettings } from "./CameraSettings";
import { CameraSettingsCountArgs } from "./CameraSettingsCountArgs";
import { CameraSettingsFindManyArgs } from "./CameraSettingsFindManyArgs";
import { CameraSettingsFindUniqueArgs } from "./CameraSettingsFindUniqueArgs";
import { CreateCameraSettingsArgs } from "./CreateCameraSettingsArgs";
import { UpdateCameraSettingsArgs } from "./UpdateCameraSettingsArgs";
import { DeleteCameraSettingsArgs } from "./DeleteCameraSettingsArgs";
import { CameraSettingsService } from "../cameraSettings.service";
@graphql.Resolver(() => CameraSettings)
export class CameraSettingsResolverBase {
  constructor(protected readonly service: CameraSettingsService) {}

  async _cameraSettingsItemsMeta(
    @graphql.Args() args: CameraSettingsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CameraSettings])
  async cameraSettingsItems(
    @graphql.Args() args: CameraSettingsFindManyArgs
  ): Promise<CameraSettings[]> {
    return this.service.cameraSettingsItems(args);
  }

  @graphql.Query(() => CameraSettings, { nullable: true })
  async cameraSettings(
    @graphql.Args() args: CameraSettingsFindUniqueArgs
  ): Promise<CameraSettings | null> {
    const result = await this.service.cameraSettings(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CameraSettings)
  async createCameraSettings(
    @graphql.Args() args: CreateCameraSettingsArgs
  ): Promise<CameraSettings> {
    return await this.service.createCameraSettings({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CameraSettings)
  async updateCameraSettings(
    @graphql.Args() args: UpdateCameraSettingsArgs
  ): Promise<CameraSettings | null> {
    try {
      return await this.service.updateCameraSettings({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CameraSettings)
  async deleteCameraSettings(
    @graphql.Args() args: DeleteCameraSettingsArgs
  ): Promise<CameraSettings | null> {
    try {
      return await this.service.deleteCameraSettings(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
