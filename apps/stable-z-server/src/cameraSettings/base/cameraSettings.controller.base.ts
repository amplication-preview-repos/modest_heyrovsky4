/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CameraSettingsService } from "../cameraSettings.service";
import { CameraSettingsCreateInput } from "./CameraSettingsCreateInput";
import { CameraSettings } from "./CameraSettings";
import { CameraSettingsFindManyArgs } from "./CameraSettingsFindManyArgs";
import { CameraSettingsWhereUniqueInput } from "./CameraSettingsWhereUniqueInput";
import { CameraSettingsUpdateInput } from "./CameraSettingsUpdateInput";

export class CameraSettingsControllerBase {
  constructor(protected readonly service: CameraSettingsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CameraSettings })
  async createCameraSettings(
    @common.Body() data: CameraSettingsCreateInput
  ): Promise<CameraSettings> {
    return await this.service.createCameraSettings({
      data: data,
      select: {
        autoFocus: true,
        createdAt: true,
        id: true,
        stabilization: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CameraSettings] })
  @ApiNestedQuery(CameraSettingsFindManyArgs)
  async cameraSettingsItems(
    @common.Req() request: Request
  ): Promise<CameraSettings[]> {
    const args = plainToClass(CameraSettingsFindManyArgs, request.query);
    return this.service.cameraSettingsItems({
      ...args,
      select: {
        autoFocus: true,
        createdAt: true,
        id: true,
        stabilization: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CameraSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async cameraSettings(
    @common.Param() params: CameraSettingsWhereUniqueInput
  ): Promise<CameraSettings | null> {
    const result = await this.service.cameraSettings({
      where: params,
      select: {
        autoFocus: true,
        createdAt: true,
        id: true,
        stabilization: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CameraSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCameraSettings(
    @common.Param() params: CameraSettingsWhereUniqueInput,
    @common.Body() data: CameraSettingsUpdateInput
  ): Promise<CameraSettings | null> {
    try {
      return await this.service.updateCameraSettings({
        where: params,
        data: data,
        select: {
          autoFocus: true,
          createdAt: true,
          id: true,
          stabilization: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CameraSettings })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCameraSettings(
    @common.Param() params: CameraSettingsWhereUniqueInput
  ): Promise<CameraSettings | null> {
    try {
      return await this.service.deleteCameraSettings({
        where: params,
        select: {
          autoFocus: true,
          createdAt: true,
          id: true,
          stabilization: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
