/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LiveFeed } from "./LiveFeed";
import { LiveFeedCountArgs } from "./LiveFeedCountArgs";
import { LiveFeedFindManyArgs } from "./LiveFeedFindManyArgs";
import { LiveFeedFindUniqueArgs } from "./LiveFeedFindUniqueArgs";
import { CreateLiveFeedArgs } from "./CreateLiveFeedArgs";
import { UpdateLiveFeedArgs } from "./UpdateLiveFeedArgs";
import { DeleteLiveFeedArgs } from "./DeleteLiveFeedArgs";
import { LiveFeedService } from "../liveFeed.service";
@graphql.Resolver(() => LiveFeed)
export class LiveFeedResolverBase {
  constructor(protected readonly service: LiveFeedService) {}

  async _liveFeedsMeta(
    @graphql.Args() args: LiveFeedCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LiveFeed])
  async liveFeeds(
    @graphql.Args() args: LiveFeedFindManyArgs
  ): Promise<LiveFeed[]> {
    return this.service.liveFeeds(args);
  }

  @graphql.Query(() => LiveFeed, { nullable: true })
  async liveFeed(
    @graphql.Args() args: LiveFeedFindUniqueArgs
  ): Promise<LiveFeed | null> {
    const result = await this.service.liveFeed(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LiveFeed)
  async createLiveFeed(
    @graphql.Args() args: CreateLiveFeedArgs
  ): Promise<LiveFeed> {
    return await this.service.createLiveFeed({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => LiveFeed)
  async updateLiveFeed(
    @graphql.Args() args: UpdateLiveFeedArgs
  ): Promise<LiveFeed | null> {
    try {
      return await this.service.updateLiveFeed({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LiveFeed)
  async deleteLiveFeed(
    @graphql.Args() args: DeleteLiveFeedArgs
  ): Promise<LiveFeed | null> {
    try {
      return await this.service.deleteLiveFeed(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
