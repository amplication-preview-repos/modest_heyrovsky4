/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, LiveFeed as PrismaLiveFeed } from "@prisma/client";

export class LiveFeedServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LiveFeedCountArgs, "select">): Promise<number> {
    return this.prisma.liveFeed.count(args);
  }

  async liveFeeds<T extends Prisma.LiveFeedFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveFeedFindManyArgs>
  ): Promise<PrismaLiveFeed[]> {
    return this.prisma.liveFeed.findMany<Prisma.LiveFeedFindManyArgs>(args);
  }
  async liveFeed<T extends Prisma.LiveFeedFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveFeedFindUniqueArgs>
  ): Promise<PrismaLiveFeed | null> {
    return this.prisma.liveFeed.findUnique(args);
  }
  async createLiveFeed<T extends Prisma.LiveFeedCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveFeedCreateArgs>
  ): Promise<PrismaLiveFeed> {
    return this.prisma.liveFeed.create<T>(args);
  }
  async updateLiveFeed<T extends Prisma.LiveFeedUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveFeedUpdateArgs>
  ): Promise<PrismaLiveFeed> {
    return this.prisma.liveFeed.update<T>(args);
  }
  async deleteLiveFeed<T extends Prisma.LiveFeedDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LiveFeedDeleteArgs>
  ): Promise<PrismaLiveFeed> {
    return this.prisma.liveFeed.delete(args);
  }
}
